<?php

/**
 * A field that stores events each with a date, location and notes
 *
 * This is an example of creating your own Fieldtype to represent a spreadsheet type table of information.
 *
 */

class FieldtypeNodeInfo extends Fieldtype {

	public static function getModuleInfo() {
		return array(
			'title' => 'Node Info',
			'version' => 001,
			'summary' => __('Field that stores a table of events for a page.'),
      'author' => 'Sebastian Preisner',
      'href' => ,
			'installs' => 'InputfieldNodeInfo',
			);
	}
  public function ___getCompatibleFieldtypes(Field $field) {
   // there are no other fieldtypes compatible with this one
    return null;
  }


  public function sanitizeValue(Page $page, Field $field, $value) {

    if(is_string($value) && strlen($value) && !ctype_digit(ltrim($value, '-'))) {
    // string value with one or more non-digit characters
    $value = trim($value);

      if(preg_match('/^(\de\d|0x\d+|\+\d+)/', $value)) {
        // likely a valid number, but in a non-native format to PW
        // examples: 1e123213, 0x1234, +123 (intval handles these)
        $value = intval($value);

      } else if(preg_match('/^[^-+\d.]+/', $value)) {
        // string starting with something we don't recognize, let PHP decide
        // example: bd#79
        $value = intval($value);
        if($value === 0) $value = ''; // blank rather than zero

      } else {
        // string value that looks like a number but has some other stuff in it

        // see if there are some definitely non-number chars in there, and truncate
        // the string to that point if we find any
        if(preg_match('/^(-?[\d,. ]+)([^\d,. ]+)/', $value, $matches)) {
          $value = $matches[1];
        }
        // check to see if we're dealing with a potential float val or thousands separators
        if(strpos($value, '.') !== false || strpos($value, ',') !== false || strpos($value, ' ') !== false) {
          // convert float values to rounded integers
          // also handles values with thousands separators
          $value = round(FieldtypeFloat::strToFloat($value));

        } else if(is_numeric($value)) {
          // let PHP decide how to convert it
          $value = intval($value);

        } else {
          // default: replace non numeric characters
          $negative = substr(trim($value), 0, 1) == '-';
          $value = preg_replace('/[^\d]/', '', $value);
          $value = strlen($value) ? (int) $value : '';
          if($negative && is_int($value)) $value = $value * -1;
        }
      }
    }

    $value = strlen("$value") ? (int) $value : '';

    return $value;
  }

  public function getInputfield(Page $page, Field $field) {
      $inputfield = $this->modules->get('InputfieldNodeInfo');
      $inputfield->nodeInfo = $field->nodeInfo;
      return $inputfield;
  }

  public function getDatabaseSchema(Field $field) {
    $schema = parent::getDatabaseSchema($field);
    $schema['data'] = 'int NOT NULL';
    return $schema;
  }

  public function ___getConfigInputfields(Field $field) {
      $inputfields = parent::___getConfigInputfields($field);

      $f = $this->modules->get('InputfieldNodeInfo');
      $f->attr('name', 'nodeInfo');
      $f->attr('value', $field->nodeInfo ? $field->nodeInfo : "");
      $f->label = __('Node Information');
      $f->required = false;

      $inputfields->append($f);

      return $inputfields;
  }

}
