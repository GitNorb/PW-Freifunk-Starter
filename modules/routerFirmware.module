<?php

class ffFirmwareLoad extends WireData implements Module, ConfigurableModule{
    protected $cache = false;
    protected $cache_node = array();
    protected $src, $nodes;

    public static function getModuleInfo() {
        return array(
            'title' => __('FF Firmware Listing'),
            'version' => '001',
            'author' => 'Kreativmonkey',
            'summary' => __('Load the list of Firmware for each Router'),
            'singular' => true,
            'autoload' => true
        );
    }

    public function ___install() {
      // Creating fields and templates for the Node manegemant
    }

    public function init() {
      if (isset ($this->data ['src']))
          $this->src = $this->data ['src'];

      // run the module every 2 minutes
      $this->addHook('LazyCron::every2Minutes', $this, 'set_nodeinfo');
    }

    protected function cache_data() {
        $htmlcache = file_get_contents($this->src);
        $this->cache = json_decode($htmlcache);
        $this->gen_nodecache();
    }

    protected function gen_nodecache() {
        foreach($this->cache->nodes as $node) {
            $this->cache_node[base64_encode(strtoupper($node->nodeinfo->node_id))] = $node;
        }
        $this->cache=false;
    }

    public function set_nodeinfo(HookEvent $e){
        $this->cache_data();
        $nodes = wire('pages')->find("template=node, key!=''");

        foreach($nodes as $node){
          $data = $this->get_nodeinfo($node->title);

          $node->of(false);
          if(!empty($data)){
            // Override exist name only if a new one.
            if($data['name'] == 'unbekannt' && empty($node->subtitle)){
              $node->subtitle = $data['name'];
            } elseif($data['name'] != 'unbekannt') {
              $node->subtitle = $data['name'];
            }
            $node->latitude = $data['geo']['latitude'];
            $node->longitude = $data['geo']['longitude'];
            $node->lastseen = strtotime($data['lastseen']);
            $node->node_hardware = $data['hardware'];
            $node->node_firmware = $data['firmware'];
            $node->ipv6 = $data['ip'];
            $node->online = $data['online'];
          } else {
            $node->online = false;
          }

          $node->save();
          $node->of(true);
        }

        $this->message("Node Informationen aktualisiert");
    }

    public function get_nodeinfo($mac) {
        $mac = strtoupper(str_replace(':', '', $mac));
        $data = array();

        if(!isset($this->cache_node[base64_encode($mac)])) return $data;
        $info = $this->cache_node[base64_encode($mac)];

        $ip = '';
        if(isset($info->nodeinfo->network->addresses)) {
            foreach($info->nodeinfo->network->addresses as $tip) {
                if(substr($tip, 0, 4) == '2a01') $ip = $tip;
            }
        }

        $data = array(
            'addresses' => $info->nodeinfo->network->addresses,
            'hardware' => $info->nodeinfo->hardware->model,
            'firmware' => $info->nodeinfo->software->firmware->release,
            'autoupdater_state' => $info->nodeinfo->software->autoupdater->enabled,
            'name' => $info->nodeinfo->hostname,
            'lastseen' => $info->lastseen,
            'geo' => array( 'latitude' => $info->nodeinfo->location->latitude,
                            'longitude' => $info->nodeinfo->location->longitude),
            'ip' => $ip,
            'online' => $info->flags->online
        );
        return $data;
    }

    public function hookModuleSave(HookEvent $event) {
       $className = $event->arguments [0];
       if ($className != get_class($this)) return;
       $this->validateConfiguration();
     }

    static public function getModuleConfigInputfields(array $data) {
        $inputfields = new InputfieldWrapper ();

        $srcField = wire('modules')->get('InputfieldText');
        $srcField->name = 'src';
        $srcField->columnWidth = 100;
        $srcField->label = __('JSON URL');
        $srcField->required = 1;
        if (isset ($data ['src']))
            $srcField->value = $data ['src'];
        $srcField->description = __('The URL to the JSON file with all node data.');
        $inputfields->add($srcField);

        return $inputfields;
    }
}
